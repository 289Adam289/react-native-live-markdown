diff --git a/lib/CONST.jsx b/lib/CONST.jsx
index 7991d1e2151dc506901686139641943fd99bfdbe..d63336ef1cef8939b55cb2145da92bc10c77d736 100644
--- a/lib/CONST.jsx
+++ b/lib/CONST.jsx
@@ -361,15 +361,14 @@ export const CONST = {
          *
          * @type RegExp
          */
-        EMOJIS: /[\p{Extended_Pictographic}\u200d\u{1f1e6}-\u{1f1ff}\u{1f3fb}-\u{1f3ff}\u{e0020}-\u{e007f}\u20E3\uFE0F]|[#*0-9]\uFE0F?\u20E3/gu,
+        EMOJIS: /(?:[\xA9\xAE\u200D\u203C\u2049\u20E3\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299\uFE0F]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDFF\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFF]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD]|\uDB40[\uDC20-\uDC7F])|[#\*0-9]\uFE0F?\u20E3/g,
 
         /**
          * Regex matching an text containing an Emoji that can be a single emoji or made up by some different emojis
          *
          * @type RegExp
          */
-        EMOJI_RULE:
-            /[\p{Extended_Pictographic}](\u200D[\p{Extended_Pictographic}]|[\u{1F3FB}-\u{1F3FF}]|[\u{E0020}-\u{E007F}]|\uFE0F|\u20E3)*|[\u{1F1E6}-\u{1F1FF}]{2}|[#*0-9]\uFE0F?\u20E3/gu,
+        EMOJI_RULE: /(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])(\u200D(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])|(?:\uD83C[\uDFFB-\uDFFF])|(?:\uDB40[\uDC20-\uDC7F])|\uFE0F|\u20E3)*|(?:\uD83C[\uDDE6-\uDDFF]){2}|[#\*0-9]\uFE0F?\u20E3/g,
     },
 
     REPORT: {
diff --git a/lib/ExpensiMark.js b/lib/ExpensiMark.js
index 9cfce520b93b9e93e98f37e4d856dd02c240efce..5026e9fe4e8cfeea9a1fe0f06b83ba2f00665d2d 100644
--- a/lib/ExpensiMark.js
+++ b/lib/ExpensiMark.js
@@ -10,8 +10,10 @@ const MARKDOWN_IMAGE_REGEX = new RegExp(`\\!(?:\\[([^\\][]*(?:\\[[^\\][]*][^\\][
 
 const SLACK_SPAN_NEW_LINE_TAG = '<span class="c-mrkdwn__br" data-stringify-type="paragraph-break" style="box-sizing: inherit; display: block; height: unset;"></span>';
 
-export default class ExpensiMark {
-    constructor() {
+export default function makeExpensiMark() {
+'worklet';
+const ExpensiMark = {
+    initializer() {
         /**
          * The list of regex replacements to do on a comment. Check the link regex is first so links are processed
          * before other delimiters
@@ -47,7 +49,7 @@ export default class ExpensiMark {
                     return `<pre>${group}</pre>`;
                 },
                 rawInputReplacement: (match, __, textWithinFences) => {
-                    const withinFences = match.replace(/(?:&#x60;&#x60;&#x60;)([\s\S]*?)(?:&#x60;&#x60;&#x60;)/g, '$1');
+                    const withinFences = match.replace(/(?:&#x60;&#x60;&#x60;)([\s\S]*?)(?:&#x60;&#x60;&#x60;)/g, '$1').replace(/<emoji>|<\/emoji>/g, '');
                     const group = textWithinFences.replace(/(?:(?![\n\r])\s)/g, '&#32;');
                     return `<pre data-code-raw="${withinFences}">${group}</pre>`;
                 },
@@ -171,7 +173,7 @@ export default class ExpensiMark {
             {
                 name: 'reportMentions',
 
-                regex: /(?<![^ \n*~_])(#[\p{Ll}0-9-]{1,80})/gimu,
+                regex: /(?<![^ \n*~_])(#[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5F\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A0-9-]{1,80})/gmiu,
                 replacement: '<mention-report>$1</mention-report>',
             },
 
@@ -593,7 +595,7 @@ export default class ExpensiMark {
          * @type {Number}
          */
         this.currentQuoteDepth = 0;
-    }
+    },
 
     getHtmlRuleset(filterRules, disabledRules, shouldKeepRawInput) {
         let rules = this.rules;
@@ -609,7 +611,7 @@ export default class ExpensiMark {
             rules = rules.filter(hasDisabledRuleName);
         }
         return rules;
-    }
+    },
 
     /**
      * Replaces markdown with html elements
@@ -657,7 +659,7 @@ export default class ExpensiMark {
         }
 
         return replacedText;
-    }
+    },
 
     /**
      * Checks matched URLs for validity and replace valid links with html elements
@@ -766,7 +768,7 @@ export default class ExpensiMark {
         }
 
         return replacedText;
-    }
+    },
 
     /**
      * Checks matched Emails for validity and replace valid links with html elements
@@ -805,7 +807,7 @@ export default class ExpensiMark {
             replacedText = replacedText.concat(textToCheck.substr(startIndex));
         }
         return replacedText;
-    }
+    },
 
     /**
      * replace block element with '\n' if :
@@ -850,7 +852,7 @@ export default class ExpensiMark {
         splitText.forEach(processText);
 
         return joinedText;
-    }
+    },
 
     /**
      * Replaces HTML with markdown
@@ -883,7 +885,7 @@ export default class ExpensiMark {
 
         this.htmlToMarkdownRules.forEach(processRule);
         return Str.htmlDecode(this.replaceBlockElementWithNewLine(generatedMarkdown));
-    }
+    },
 
     /**
      * Convert HTML to text
@@ -907,7 +909,7 @@ export default class ExpensiMark {
         // We use 'htmlDecode' instead of 'unescape' to replace entities like '&#32;'
         replacedText = Str.htmlDecode(replacedText);
         return replacedText;
-    }
+    },
 
     /**
      * Modify text for Quotes replacing chevrons with html elements
@@ -970,7 +972,7 @@ export default class ExpensiMark {
             replacedText = textToCheck;
         }
         return replacedText;
-    }
+    },
 
     /**
      * Format the content of blockquote if the text matches the regex or else just return the original text
@@ -998,7 +1000,7 @@ export default class ExpensiMark {
             return replacement(textToFormat);
         }
         return textToCheck;
-    }
+    },
 
     /**
      * Check if the input text includes only the open or the close tag of an element.
@@ -1037,7 +1039,7 @@ export default class ExpensiMark {
 
         // If there are any tags left in the stack, they're unclosed
         return tagStack.length !== 0;
-    }
+    },
 
     /**
      * @param {String} comment
@@ -1059,7 +1061,7 @@ export default class ExpensiMark {
             console.warn('Error parsing url in ExpensiMark.extractLinksInMarkdownComment', {error: e});
             return undefined;
         }
-    }
+    },
 
     /**
      * Compares two markdown comments and returns a list of the links removed in a new comment.
@@ -1072,7 +1074,7 @@ export default class ExpensiMark {
         const linksInOld = this.extractLinksInMarkdownComment(oldComment);
         const linksInNew = this.extractLinksInMarkdownComment(newComment);
         return linksInOld === undefined || linksInNew === undefined ? [] : linksInOld.filter((link) => !linksInNew.includes(link));
-    }
+    },
 
     /**
      * Escapes the content of an HTML attribute value
@@ -1091,3 +1093,7 @@ export default class ExpensiMark {
         return Utils.escape(originalContent);
     }
 }
+
+ExpensiMark.initializer();
+return ExpensiMark;
+}
diff --git a/lib/str.js b/lib/str.js
index 162823482e2c4b4b23476fe98248c464930a525d..97804fe06529d7cba83faa79983ae1c71f8ef9ab 100644
--- a/lib/str.js
+++ b/lib/str.js
@@ -15,6 +15,7 @@ const Str = {
      * @return {Boolean}
      */
     endsWith(str, suffix) {
+        'worklet';
         if (!str || !suffix) {
             return false;
         }
@@ -31,6 +32,7 @@ const Str = {
      * @return {Number} The cent value of the @p amountStr.
      */
     fromUSDToNumber(amountStr, allowFraction) {
+        'worklet';
         let amount = String(amountStr).replace(/[^\d.\-()]+/g, '');
         if (amount.match(/\(.*\)/)) {
             const modifiedAmount = amount.replace(/[()]/g, '');
@@ -55,6 +57,7 @@ const Str = {
      * @returns {string}
      */
     truncateInMiddle(fullStr, maxLength) {
+        'worklet';
         if (fullStr.length <= maxLength) {
             return fullStr;
         }
@@ -74,6 +77,7 @@ const Str = {
      * @returns {string}
      */
     nl2br(str) {
+        'worklet';
         return str.replace(/\n/g, '<br />');
     },
 
@@ -84,6 +88,7 @@ const Str = {
      * @return {String} The decoded string.
      */
     htmlDecode(s) {
+        'worklet';
         return HtmlEntities.decode(s);
     },
 
@@ -94,6 +99,7 @@ const Str = {
      * @return {String} @p s HTML encoded.
      */
     htmlEncode(s) {
+        'worklet';
         return HtmlEntities.encode(s);
     },
 
@@ -104,6 +110,7 @@ const Str = {
      * @return {String} the escaped string
      */
     safeEscape(s) {
+        'worklet';
         return Utils.escape(Utils.unescape(s));
     },
 
@@ -115,6 +122,7 @@ const Str = {
      * @return {Boolean} true when first === second, ignoring HTML encoding
      */
     htmlEncodingInsensitiveEquals(first, second) {
+        'worklet';
         return first === second || this.htmlDecode(first) === second || this.htmlEncode(first) === second;
     },
 
@@ -125,6 +133,7 @@ const Str = {
      * @return {String} The ID string made from @p str.
      */
     makeID(str) {
+        'worklet';
         const modifiedString = String(str)
             .replace(/[^A-Za-z0-9]/g, '_')
             .toUpperCase();
@@ -138,6 +147,7 @@ const Str = {
      * @return {String|null} The ID string.
      */
     extractID(str) {
+        'worklet';
         const matches = str.match(/id[A-Z0-9_]+/);
         return matches.length > 0 ? matches[0] : null;
     },
@@ -150,6 +160,7 @@ const Str = {
      * @return {String}
      */
     recapitalize(val) {
+        'worklet';
         // First replace every letter with its lowercase equivalent
         // Cast to string.
         let str = String(val);
@@ -175,6 +186,7 @@ const Str = {
      * @returns {String}
      */
     sanitizeToAlphaNumeric(input) {
+        'worklet';
         return String(input).replace(/[^\d\w]/g, '_');
     },
 
@@ -185,6 +197,7 @@ const Str = {
      * @returns {String}
      */
     stripNonNumeric(input) {
+        'worklet';
         return String(input).replace(/[^\d]/g, '');
     },
 
@@ -194,6 +207,7 @@ const Str = {
      * @returns {String} The ascii version of the string.
      */
     stripNonASCIICharacters(input) {
+        'worklet';
         return String(input).replace(/[\u0000-\u0019\u0080-\uffff]/g, '');
     },
 
@@ -208,6 +222,7 @@ const Str = {
      * @return {String} The shortened @p text.
      */
     shortenText(val, length) {
+        'worklet';
         // Remove extra spaces because they don't show up in html anyway.
         const text = String(val).replace(/\s+/g, ' ');
         const truncatedText = text.substr(0, length - 3);
@@ -221,6 +236,7 @@ const Str = {
      * @returns {Number} Byte size of the character
      */
     getRawByteSize(inputChar) {
+        'worklet';
         const onlyChar = String(inputChar);
         const c = onlyChar.charCodeAt();
 
@@ -254,6 +270,7 @@ const Str = {
      * @returns {Number} The number of bytes used by string
      */
     getByteLength(input) {
+        'worklet';
         // Force string type
         const stringInput = String(input);
         let byteLength = 0;
@@ -270,6 +287,7 @@ const Str = {
      * @returns {String} Returns a shorted input if the input size exceeds the max
      */
     shortenByByte(input, maxSize) {
+        'worklet';
         const stringInput = String(input);
         let totalByteLength = 0;
         for (let i = 0; i < stringInput.length; i++) {
@@ -291,6 +309,7 @@ const Str = {
      * @return {Boolean} Retruns true if the haystack starts with the needle.
      */
     startsWith(haystack, needle) {
+        'worklet';
         return this.isString(haystack) && this.isString(needle) && haystack.substring(0, needle.length) === needle;
     },
 
@@ -301,6 +320,7 @@ const Str = {
      * @return {String} The text from within the HTML string.
      */
     stripHTML(str) {
+        'worklet';
         if (!this.isString(str)) {
             return '';
         }
@@ -315,6 +335,7 @@ const Str = {
      * @return {String} The recapitalized string.
      */
     UCFirst(str) {
+        'worklet';
         return str.substr(0, 1).toUpperCase() + str.substr(1);
     },
 
@@ -328,6 +349,7 @@ const Str = {
      * @return {String} The cut/trimmed string.
      */
     cutAfter(str, substr) {
+        'worklet';
         const index = str.indexOf(substr);
         if (index !== -1) {
             return str.substring(0, index);
@@ -345,6 +367,7 @@ const Str = {
      * @return {String} The cut/trimmed string.
      */
     cutBefore(str, substr) {
+        'worklet';
         const index = str.indexOf(substr);
         if (index !== -1) {
             return str.substring(index + substr.length);
@@ -360,6 +383,7 @@ const Str = {
      * @returns {Boolean} True iff the string is a domain name
      */
     isValidDomainName(string) {
+        'worklet';
         return Boolean(String(string).match(Constants.CONST.REG_EXP.DOMAIN));
     },
 
@@ -371,6 +395,7 @@ const Str = {
      * @returns {Boolean} True if the string is a valid hyperlink
      */
     isValidURL(string) {
+        'worklet';
         return Boolean(String(string).match(Constants.CONST.REG_EXP.HYPERLINK));
     },
 
@@ -383,6 +408,7 @@ const Str = {
      * @returns {Boolean} True iff the string is an email
      */
     isValidEmail(string) {
+        'worklet';
         return Boolean(String(string).match(Constants.CONST.REG_EXP.EMAIL));
     },
 
@@ -394,6 +420,7 @@ const Str = {
      * @returns {Boolean} True if the string is an valid email created by comment markdown.
      */
     isValidEmailMarkdown(string) {
+        'worklet';
         return Boolean(String(string).match(`^${Constants.CONST.REG_EXP.MARKDOWN_EMAIL}$`));
     },
 
@@ -405,6 +432,7 @@ const Str = {
      * @returns {String} string with the trailing comma removed
      */
     removeTrailingComma(string) {
+        'worklet';
         return string.trim().replace(/(,$)/g, '');
     },
 
@@ -416,6 +444,7 @@ const Str = {
      * @returns {Boolean} True if all emails are valid or if input is empty
      */
     areValidEmails(str) {
+        'worklet';
         const string = this.removeTrailingComma(str);
         if (string === '') {
             return true;
@@ -438,6 +467,7 @@ const Str = {
      * @returns {String[]|null}
      */
     extractEmail(string) {
+        'worklet';
         return String(string).match(Constants.CONST.REG_EXP.EMAIL_SEARCH);
     },
 
@@ -450,6 +480,7 @@ const Str = {
      * @returns {String} The domain name in the email address.
      */
     extractEmailDomain(email) {
+        'worklet';
         return this.cutBefore(email, '@');
     },
 
@@ -462,6 +493,7 @@ const Str = {
      * @returns {String|null} The company name in the email address or null.
      */
     extractCompanyNameFromEmailDomain(email) {
+        'worklet';
         const domain = this.extractEmailDomain(email);
         if (!domain) {
             return null;
@@ -484,6 +516,7 @@ const Str = {
      * @returns {String} The local part in the email address.
      */
     extractEmailLocalPart(email) {
+        'worklet';
         return this.cutAfter(email, '@');
     },
 
@@ -494,6 +527,7 @@ const Str = {
      * @returns {String|null}
      */
     sanitizePhoneNumber(str) {
+        'worklet';
         const string = str.replace(/(?!^\+)\D/g, '');
         return string.length <= 15 && string.length >= 10 ? string : null;
     },
@@ -505,6 +539,7 @@ const Str = {
      * @returns {String|null}
      */
     sanitizeEmail(str) {
+        'worklet';
         const string = str.toLowerCase().trim();
         return Constants.CONST.REG_EXP.EMAIL.test(string) ? string : null;
     },
@@ -517,6 +552,7 @@ const Str = {
      * @returns {String} The escaped string
      */
     escapeForRegExp(string) {
+        'worklet';
         return string.replace(/[-[\]/{}()*+?.\\^$|]/g, '\\$&');
     },
 
@@ -527,6 +563,7 @@ const Str = {
      * @returns {String} The escaped string
      */
     escapeForExpenseRule(string) {
+        'worklet';
         return string.replace(/[-[\]/{}()*+?\\^$|]/g, '\\$&');
     },
 
@@ -538,6 +575,7 @@ const Str = {
      * @returns {String} The escaped string
      */
     addBackslashBeforeColonsForTagNamesComingFromQBD(string) {
+        'worklet';
         return string.replace(/([^\\]):/g, '$1\\:');
     },
 
@@ -549,6 +587,7 @@ const Str = {
      * @returns {String}
      */
     stripBackslashes(string) {
+        'worklet';
         return string.replace(/\\/g, '');
     },
 
@@ -562,6 +601,7 @@ const Str = {
      * @returns {Boolean} true if the length is in the range, false otherwise
      */
     isOfLength(string, minimumLength, maximumLength) {
+        'worklet';
         if (!this.isString(string)) {
             return false;
         }
@@ -586,6 +626,7 @@ const Str = {
      * @returns {Integer} The number of times needle is in haystack.
      */
     occurences(haystack, needle, allowOverlapping) {
+        'worklet';
         let count = 0;
         let pos = 0;
 
@@ -617,6 +658,7 @@ const Str = {
      * @returns {String}  Uppercase worded string
      */
     ucwords(str) {
+        'worklet';
         const capitalize = ($1) => $1.toUpperCase();
         return String(str).replace(/^([a-z\u00E0-\u00FC])|\s+([a-z\u00E0-\u00FC])/g, capitalize);
     },
@@ -630,6 +672,7 @@ const Str = {
      * @return {Boolean} Retruns true if the haystack contains the needle
      */
     contains(haystack, needle) {
+        'worklet';
         return haystack.indexOf(needle) !== -1;
     },
 
@@ -642,6 +685,7 @@ const Str = {
      * @return {Boolean} Retruns true if the haystack contains the needle, ignoring case
      */
     caseInsensitiveContains(haystack, needle) {
+        'worklet';
         return this.contains(haystack.toLowerCase(), needle.toLowerCase());
     },
 
@@ -656,6 +700,7 @@ const Str = {
      *                   0 if first string = second string
      */
     caseInsensitiveCompare(string1, string2) {
+        'worklet';
         const lowerCase1 = string1.toLocaleLowerCase();
         const lowerCase2 = string2.toLocaleLowerCase();
 
@@ -670,6 +715,7 @@ const Str = {
      * @return {Boolean} true when first == second except for case
      */
     caseInsensitiveEquals(first, second) {
+        'worklet';
         return this.caseInsensitiveCompare(first, second) === 0;
     },
 
@@ -684,6 +730,7 @@ const Str = {
      *                   0 if first string = second string
      */
     compare(string1, string2) {
+        'worklet';
         if (string1 < string2) {
             return -1;
         }
@@ -699,6 +746,7 @@ const Str = {
      * @return {Boolean}
      */
     isFileExtensionSmartReportsValid(filename) {
+        'worklet';
         // Allowed extensions. Make sure to keep them in sync with those defined
         // in SmartReport_Utils::templateFileUploadCheck()
         const allowedExtensions = ['xls', 'xlsx', 'xlsm', 'xltm'];
@@ -712,6 +760,7 @@ const Str = {
      * @return {String} masked account number
      */
     maskPAN(number) {
+        'worklet';
         // cast to string
         const accountNumber = String(number);
         const len = accountNumber.length;
@@ -741,6 +790,7 @@ const Str = {
      * @return {Boolean}
      */
     isString(obj) {
+        'worklet';
         return this.isTypeOf(obj, 'String');
     },
 
@@ -751,6 +801,7 @@ const Str = {
      * @return {Boolean}
      */
     isNumber(obj) {
+        'worklet';
         return this.isTypeOf(obj, 'Number');
     },
 
@@ -763,6 +814,7 @@ const Str = {
      * @return {Boolean}
      */
     isTypeOf(obj, type) {
+        'worklet';
         return Object.prototype.toString.call(obj) === `[object ${type}]`;
     },
 
@@ -773,6 +825,7 @@ const Str = {
      * @return {Boolean}
      */
     isUndefined(obj) {
+        'worklet';
         // eslint-disable-next-line no-void
         return obj === void 0;
     },
@@ -786,6 +839,7 @@ const Str = {
      * @return {String} masked string
      */
     maskFirstNCharacters(str, n, mask) {
+        'worklet';
         // if str is empty, str or mask aren't strings,
         // or n is not a number, do nothing
         if (!this.isString(str) || !this.isString(mask) || str.length === 0 || !this.isNumber(n)) {
@@ -802,6 +856,7 @@ const Str = {
      * @returns {string}
      */
     trim(str) {
+        'worklet';
         return str.trim();
     },
 
@@ -811,6 +866,7 @@ const Str = {
      * @returns {Number}
      */
     percentageStringToNumber(percentageString) {
+        'worklet';
         return Number(this.cutAfter(percentageString, '%'));
     },
 
@@ -820,6 +876,7 @@ const Str = {
      * @returns {string}
      */
     removeSpaces(input) {
+        'worklet';
         return String(input).replace(' ', '');
     },
 
@@ -836,6 +893,7 @@ const Str = {
      * @return {String}
      */
     pluralize(singular, plural, n) {
+        'worklet';
         if (!n || n > 1) {
             return plural;
         }
@@ -850,6 +908,7 @@ const Str = {
      * @return {Boolean} Whether or not this string is an encrpypted number
      */
     isEncryptedCardNumber(number) {
+        'worklet';
         // Older encrypted versioning.
         if (/^[\da-fA-F]+$/.test(number)) {
             return number.length % 32 === 0;
@@ -869,6 +928,7 @@ const Str = {
      * @return {Boolean}
      */
     toBool(value) {
+        'worklet';
         if (this.isString(value)) {
             return value.toLowerCase() === 'true';
         }
@@ -884,6 +944,7 @@ const Str = {
      * @return {Boolean} true when first could be the masked version of second
      */
     maskedEquals(first, second, mask) {
+        'worklet';
         const firsts = first.match(/.{1,1}/g);
         const seconds = second.match(/.{1,1}/g);
         const defaultMask = mask || 'X';
@@ -908,6 +969,7 @@ const Str = {
      * @return {string}
      */
     boldify(text, regexp) {
+        'worklet';
         return text.replace(regexp, '<strong>$1</strong>');
     },
 
@@ -919,6 +981,7 @@ const Str = {
      * @deprecated use isValidE164Phone to validate E.164 phone numbers or isValidPhoneFormat to validate phone numbers in general
      */
     isValidPhone(phone) {
+        'worklet';
         return Constants.CONST.SMS.E164_REGEX.test(phone);
     },
 
@@ -929,6 +992,7 @@ const Str = {
      * @return {bool}
      */
     isValidE164Phone(phone) {
+        'worklet';
         return Constants.CONST.SMS.E164_REGEX.test(phone);
     },
 
@@ -944,6 +1008,7 @@ const Str = {
      * @return {bool}
      */
     isValidPhoneFormat(phone) {
+        'worklet';
         return Constants.CONST.REG_EXP.GENERAL_PHONE_PART.test(phone);
     },
 
@@ -954,6 +1019,7 @@ const Str = {
      * @returns {bool}
      */
     isValidMention(mention) {
+        'worklet';
         // Mentions can start @ proceeded by a space, eg "ping @user@domain.tld"
         if (/[\s@]/g.test(mention.charAt(0))) {
             return true;
@@ -973,6 +1039,7 @@ const Str = {
      * @return {String}
      */
     removeSMSDomain(text) {
+        'worklet';
         return text.replace(REMOVE_SMS_DOMAIN_PATTERN, '');
     },
 
@@ -983,6 +1050,7 @@ const Str = {
      * @return {String}
      */
     isSMSLogin(text) {
+        'worklet';
         return this.isValidE164Phone(this.removeSMSDomain(text));
     },
 
@@ -998,6 +1066,7 @@ const Str = {
      * @returns {Array}
      */
     matchAll(str, regex) {
+        'worklet';
         const matches = [];
         const collectMatches = (...args) => {
             const match = Array.prototype.slice.call(args, 0, -2);
@@ -1017,6 +1086,7 @@ const Str = {
      * @returns {String}
      */
     guid(prefix = '') {
+        'worklet';
         function s4() {
             return Math.floor((1 + Math.random()) * 0x10000)
                 .toString(16)
@@ -1032,6 +1102,7 @@ const Str = {
      * @returns {String} The formatted URL
      */
     normalizeUrl(url) {
+        'worklet';
         return typeof url === 'string' && url.startsWith('/') ? url : `/${url}`;
     },
 
@@ -1042,6 +1113,7 @@ const Str = {
      * @returns {String} The formatted URL
      */
     sanitizeURL(url) {
+        'worklet';
         const regex = new RegExp(`^${UrlPatterns.URL_REGEX}$`, 'i');
         const match = regex.exec(url);
         if (!match) {
@@ -1060,6 +1132,7 @@ const Str = {
      * @returns {String}
      */
     result(parameter, ...args) {
+        'worklet';
         return Utils.isFunction(parameter) ? parameter(...args) : parameter;
     },
 
@@ -1071,6 +1144,7 @@ const Str = {
      * @returns {String|undefined}
      */
     getExtension(url) {
+        'worklet';
         const parts = url.split('.');
         return parts[parts.length - 1].split('?')[0].toLowerCase();
     },
@@ -1082,6 +1156,7 @@ const Str = {
      * @returns {Boolean} Whether file path is PDF or not
      */
     isPDF(url) {
+        'worklet';
         return this.getExtension(url) === 'pdf';
     },
 
@@ -1097,6 +1172,7 @@ const Str = {
      * @returns {Boolean}
      */
     isImage(url) {
+        'worklet';
         return ['jpeg', 'jpg', 'gif', 'png', 'bmp', 'webp'].includes(this.getExtension(url));
     },
 
@@ -1113,6 +1189,7 @@ const Str = {
      * @returns {Boolean}
      */
     isVideo(url) {
+        'worklet';
         return ['mov', 'mp4', 'webm', 'mkv'].includes(this.getExtension(url));
     },
 
@@ -1124,6 +1201,7 @@ const Str = {
      * @return {Boolean} True if is a domain account email, otherwise false.
      */
     isDomainEmail(email) {
+        'worklet';
         return this.startsWith(email, '+@');
     },
 
@@ -1136,6 +1214,7 @@ const Str = {
      * @returns {String}
      */
     replaceAll(text, searchValue, replaceValue) {
+        'worklet';
         return String.prototype.replaceAll.call(text, searchValue, replaceValue);
     },
 };
diff --git a/lib/utils.js b/lib/utils.js
index 0dbef5898d2d931e645cf7b2a0ccfd88d43bcf82..e9a935f3dba5e637ef1ed2d0d7a158e016e5f3d7 100644
--- a/lib/utils.js
+++ b/lib/utils.js
@@ -16,6 +16,7 @@ const reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
  * @returns {string} - The escaped string.
  */
 function escape(string) {
+    'worklet';
     return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, (chr) => htmlEscapes[chr]) : string || '';
 }
 
@@ -40,6 +41,7 @@ const reHasEscapedHtml = RegExp(reEscapedHtml.source);
  * @returns {string} - The unescaped string.
  * */
 function unescape(string) {
+    'worklet';
     return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, (entity) => htmlUnescapes[entity] || "'") : string || '';
 }
 
@@ -49,6 +51,7 @@ function unescape(string) {
  * @returns {boolean}
  */
 function isFunction(variableToCheck) {
+    'worklet';
     return variableToCheck instanceof Function;
 }
 
@@ -58,6 +61,7 @@ function isFunction(variableToCheck) {
  * @returns {boolean}
  */
 function isObject(obj) {
+    'worklet';
     const type = typeof obj;
     return type === 'function' || (!!obj && type === 'object');
 }
