diff --git a/lib/str.js b/lib/str.js
index 813e51eb5988a7982bab2519805b29d932bef80a..b7323a608d49f50637f221f025db3341f60da5f7 100644
--- a/lib/str.js
+++ b/lib/str.js
@@ -1,11 +1,15 @@
 /* eslint-disable no-control-regex */
-import _ from 'underscore';
 import {encode, decode} from 'html-entities';
 import {CONST} from './CONST';
 import {URL_REGEX} from './Url';
 
 const REMOVE_SMS_DOMAIN_PATTERN = new RegExp(`@${CONST.SMS.DOMAIN}`, 'gi');
 
+// TODO: remove jQuery and underscore
+const jQuery = undefined;
+const $ = {}; 
+const _ = {};
+
 const Str = {
 
     /**
@@ -16,6 +20,8 @@ const Str = {
      * @return {Boolean}
      */
     endsWith(str, suffix) {
+        'worklet';
+
         if (!str || !suffix) {
             return false;
         }
@@ -32,6 +38,8 @@ const Str = {
      * @return {Number} The cent value of the @p amountStr.
      */
     fromUSDToNumber(amountStr, allowFraction) {
+        'worklet';
+        
         let amount = String(amountStr).replace(/[^\d.\-()]+/g, '');
         if (amount.match(/\(.*\)/)) {
             const modifiedAmount = amount.replace(/[()]/g, '');
@@ -56,6 +64,8 @@ const Str = {
      * @returns {string}
      */
     truncateInMiddle(fullStr, maxLength) {
+        'worklet';
+        
         if (fullStr.length <= maxLength) {
             return fullStr;
         }
@@ -75,6 +85,8 @@ const Str = {
      * @returns {string}
      */
     nl2br(str) {
+        'worklet';
+        
         return str.replace(/\n/g, '<br />');
     },
 
@@ -85,6 +97,8 @@ const Str = {
      * @return {String} The decoded string.
      */
     htmlDecode(s) {
+        'worklet';
+        
         // Use jQuery if it exists or else use html-entities
         if (typeof jQuery !== 'undefined') {
             return jQuery('<textarea/>').html(s).text();
@@ -99,6 +113,8 @@ const Str = {
      * @return {String} @p s HTML encoded.
      */
     htmlEncode(s) {
+        'worklet';
+        
         // Use jQuery if it exists or else use html-entities
         if (typeof jQuery !== 'undefined') {
             return jQuery('<textarea/>').text(s).html();
@@ -113,6 +129,8 @@ const Str = {
      * @return {String} the escaped string
      */
     safeEscape(s) {
+        'worklet';
+        
         return _.escape(_.unescape(s));
     },
 
@@ -124,6 +142,8 @@ const Str = {
      * @return {Boolean} true when first === second, ignoring HTML encoding
      */
     htmlEncodingInsensitiveEquals(first, second) {
+        'worklet';
+        
         return first === second
             || this.htmlDecode(first) === second
             || this.htmlEncode(first) === second;
@@ -136,6 +156,8 @@ const Str = {
      * @return {String} The ID string made from @p str.
      */
     makeID(str) {
+        'worklet';
+        
         const modifiedString = String(str).replace(/[^A-Za-z0-9]/g, '_').toUpperCase();
         return `id_${modifiedString}`;
     },
@@ -147,6 +169,8 @@ const Str = {
      * @return {String|null} The ID string.
      */
     extractID(str) {
+        'worklet';
+        
         const matches = str.match(/id[A-Z0-9_]+/);
         return matches.length > 0 ? matches[0] : null;
     },
@@ -159,6 +183,8 @@ const Str = {
      * @return {String}
      */
     recapitalize(val) {
+        'worklet';
+        
         // First replace every letter with its lowercase equivalent
         // Cast to string.
         let str = String(val);
@@ -185,6 +211,8 @@ const Str = {
      * @returns {String}
      */
     sanitizeToAlphaNumeric(input) {
+        'worklet';
+        
         return String(input).replace(/[^\d\w]/g, '_');
     },
 
@@ -195,6 +223,8 @@ const Str = {
      * @returns {String}
      */
     stripNonNumeric(input) {
+        'worklet';
+        
         return String(input).replace(/[^\d]/g, '');
     },
 
@@ -204,6 +234,8 @@ const Str = {
      * @returns {String} The ascii version of the string.
      */
     stripNonASCIICharacters(input) {
+        'worklet';
+        
         return String(input).replace(/[\u0000-\u0019\u0080-\uffff]/g, '');
     },
 
@@ -218,6 +250,8 @@ const Str = {
      * @return {String} The shortened @p text.
      */
     shortenText(val, length) {
+        'worklet';
+        
         // Remove extra spaces because they don't show up in html anyway.
         const text = String(val).replace(/\s+/g, ' ');
         const truncatedText = text.substr(0, length - 3);
@@ -231,6 +265,8 @@ const Str = {
      * @returns {Number} Byte size of the character
      */
     getRawByteSize(inputChar) {
+        'worklet';
+        
         const onlyChar = String(inputChar);
         const c = onlyChar.charCodeAt();
 
@@ -264,6 +300,8 @@ const Str = {
      * @returns {Number} The number of bytes used by string
      */
     getByteLength(input) {
+        'worklet';
+        
         // Force string type
         const stringInput = String(input);
         let byteLength = 0;
@@ -280,6 +318,8 @@ const Str = {
      * @returns {String} Returns a shorted input if the input size exceeds the max
      */
     shortenByByte(input, maxSize) {
+        'worklet';
+        
         const stringInput = String(input);
         let totalByteLength = 0;
         for (let i = 0; i < stringInput.length; i++) {
@@ -301,6 +341,8 @@ const Str = {
      * @return {Boolean} Retruns true if the haystack starts with the needle.
      */
     startsWith(haystack, needle) {
+        'worklet';
+        
         return this.isString(haystack)
             && this.isString(needle)
             && haystack.substring(0, needle.length) === needle;
@@ -313,6 +355,8 @@ const Str = {
      * @return {String} The text from within the HTML string.
      */
     stripHTML(str) {
+        'worklet';
+        
         if (!this.isString(str)) {
             return '';
         }
@@ -327,6 +371,8 @@ const Str = {
      * @return {String} The recapitalized string.
      */
     UCFirst(str) {
+        'worklet';
+        
         return str.substr(0, 1).toUpperCase() + str.substr(1);
     },
 
@@ -340,6 +386,8 @@ const Str = {
      * @return {String} The cut/trimmed string.
      */
     cutAfter(str, substr) {
+        'worklet';
+        
         const index = str.indexOf(substr);
         if (index !== -1) {
             return str.substring(0, index);
@@ -357,6 +405,8 @@ const Str = {
      * @return {String} The cut/trimmed string.
      */
     cutBefore(str, substr) {
+        'worklet';
+        
         const index = str.indexOf(substr);
         if (index !== -1) {
             return str.substring(index + substr.length);
@@ -372,6 +422,8 @@ const Str = {
      * @returns {Boolean} True iff the string is a domain name
      */
     isValidDomainName(string) {
+        'worklet';
+        
         return Boolean(String(string).match(CONST.REG_EXP.DOMAIN));
     },
 
@@ -383,6 +435,8 @@ const Str = {
      * @returns {Boolean} True if the string is a valid hyperlink
      */
     isValidURL(string) {
+        'worklet';
+        
         return Boolean(String(string).match(CONST.REG_EXP.HYPERLINK));
     },
 
@@ -395,6 +449,8 @@ const Str = {
      * @returns {Boolean} True iff the string is an email
      */
     isValidEmail(string) {
+        'worklet';
+        
         return Boolean(String(string).match(CONST.REG_EXP.EMAIL));
     },
 
@@ -406,6 +462,8 @@ const Str = {
      * @returns {Boolean} True if the string is an valid email created by comment markdown.
      */
     isValidEmailMarkdown(string) {
+        'worklet';
+        
         return Boolean(String(string).match(`^${CONST.REG_EXP.MARKDOWN_EMAIL}$`));
     },
 
@@ -417,6 +475,8 @@ const Str = {
      * @returns {String} string with the trailing comma removed
      */
     removeTrailingComma(string) {
+        'worklet';
+        
         return string.trim().replace(/(,$)/g, '');
     },
 
@@ -428,6 +488,8 @@ const Str = {
      * @returns {Boolean} True if all emails are valid or if input is empty
      */
     areValidEmails(str) {
+        'worklet';
+        
         const string = this.removeTrailingComma(str);
         if (string === '') {
             return true;
@@ -450,6 +512,8 @@ const Str = {
      * @returns {String[]|null}
      */
     extractEmail(string) {
+        'worklet';
+        
         return String(string).match(CONST.REG_EXP.EMAIL_SEARCH);
     },
 
@@ -462,6 +526,8 @@ const Str = {
      * @returns {String} The domain name in the email address.
      */
     extractEmailDomain(email) {
+        'worklet';
+        
         return this.cutBefore(email, '@');
     },
 
@@ -474,6 +540,8 @@ const Str = {
      * @returns {String|null} The company name in the email address or null.
      */
     extractCompanyNameFromEmailDomain(email) {
+        'worklet';
+        
         const domain = this.extractEmailDomain(email);
         if (!domain) {
             return null;
@@ -496,6 +564,8 @@ const Str = {
      * @returns {String} The local part in the email address.
      */
     extractEmailLocalPart(email) {
+        'worklet';
+        
         return this.cutAfter(email, '@');
     },
 
@@ -506,6 +576,8 @@ const Str = {
      * @returns {String|null}
      */
     sanitizePhoneNumber(str) {
+        'worklet';
+        
         const string = str.replace(/(?!^\+)\D/g, '');
         return string.length <= 15 && string.length >= 10 ? string : null;
     },
@@ -517,6 +589,8 @@ const Str = {
      * @returns {String|null}
      */
     sanitizeEmail(str) {
+        'worklet';
+        
         const string = str.toLowerCase().trim();
         return CONST.REG_EXP.EMAIL.test(string) ? string : null;
     },
@@ -529,6 +603,8 @@ const Str = {
      * @returns {String} The escaped string
      */
     escapeForRegExp(string) {
+        'worklet';
+        
         return string.replace(/[-[\]/{}()*+?.\\^$|]/g, '\\$&');
     },
 
@@ -539,6 +615,8 @@ const Str = {
      * @returns {String} The escaped string
      */
     escapeForExpenseRule(string) {
+        'worklet';
+        
         return string.replace(/[-[\]/{}()*+?\\^$|]/g, '\\$&');
     },
 
@@ -550,6 +628,8 @@ const Str = {
      * @returns {String} The escaped string
      */
     addBackslashBeforeColonsForTagNamesComingFromQBD(string) {
+        'worklet';
+        
         return string.replace(/([^\\]):/g, '$1\\:');
     },
 
@@ -561,6 +641,8 @@ const Str = {
      * @returns {String}
      */
     stripBackslashes(string) {
+        'worklet';
+        
         return string.replace(/\\/g, '');
     },
 
@@ -574,6 +656,8 @@ const Str = {
      * @returns {Boolean} true if the length is in the range, false otherwise
      */
     isOfLength(string, minimumLength, maximumLength) {
+        'worklet';
+        
         if (!this.isString(string)) {
             return false;
         }
@@ -598,6 +682,8 @@ const Str = {
      * @returns {Integer} The number of times needle is in haystack.
      */
     occurences(haystack, needle, allowOverlapping) {
+        'worklet';
+        
         let count = 0;
         let pos = 0;
 
@@ -629,6 +715,8 @@ const Str = {
      * @returns {String}  Uppercase worded string
      */
     ucwords(str) {
+        'worklet';
+        
         return (String(str)).replace(/^([a-z\u00E0-\u00FC])|\s+([a-z\u00E0-\u00FC])/g,
             $1 => $1.toUpperCase());
     },
@@ -642,6 +730,8 @@ const Str = {
      * @return {Boolean} Retruns true if the haystack contains the needle
      */
     contains(haystack, needle) {
+        'worklet';
+        
         return haystack.indexOf(needle) !== -1;
     },
 
@@ -654,6 +744,8 @@ const Str = {
      * @return {Boolean} Retruns true if the haystack contains the needle, ignoring case
      */
     caseInsensitiveContains(haystack, needle) {
+        'worklet';
+        
         return this.contains(haystack.toLowerCase(), needle.toLowerCase());
     },
 
@@ -668,6 +760,8 @@ const Str = {
      *                   0 if first string = second string
      */
     caseInsensitiveCompare(string1, string2) {
+        'worklet';
+        
         const lowerCase1 = string1.toLocaleLowerCase();
         const lowerCase2 = string2.toLocaleLowerCase();
 
@@ -682,6 +776,8 @@ const Str = {
      * @return {Boolean} true when first == second except for case
      */
     caseInsensitiveEquals(first, second) {
+        'worklet';
+        
         return this.caseInsensitiveCompare(first, second) === 0;
     },
 
@@ -696,6 +792,8 @@ const Str = {
      *                   0 if first string = second string
      */
     compare(string1, string2) {
+        'worklet';
+        
         if (string1 < string2) {
             return -1;
         } if (string1 > string2) {
@@ -710,6 +808,8 @@ const Str = {
      * @return {Boolean}
      */
     isFileExtensionSmartReportsValid(filename) {
+        'worklet';
+        
         // Allowed extensions. Make sure to keep them in sync with those defined
         // in SmartReport_Utils::templateFileUploadCheck()
         const allowedExtensions = ['xls', 'xlsx', 'xlsm', 'xltm'];
@@ -723,6 +823,8 @@ const Str = {
      * @return {String} masked account number
      */
     maskPAN(number) {
+        'worklet';
+        
         // cast to string
         const accountNumber = String(number);
         const len = accountNumber.length;
@@ -752,6 +854,8 @@ const Str = {
      * @return {Boolean}
      */
     isString(obj) {
+        'worklet';
+        
         return this.isTypeOf(obj, 'String');
     },
 
@@ -762,6 +866,8 @@ const Str = {
      * @return {Boolean}
      */
     isNumber(obj) {
+        'worklet';
+        
         return this.isTypeOf(obj, 'Number');
     },
 
@@ -774,6 +880,8 @@ const Str = {
      * @return {Boolean}
      */
     isTypeOf(obj, type) {
+        'worklet';
+        
         return Object.prototype.toString.call(obj) === `[object ${type}]`;
     },
 
@@ -784,6 +892,8 @@ const Str = {
      * @return {Boolean}
      */
     isUndefined(obj) {
+        'worklet';
+        
         // eslint-disable-next-line no-void
         return obj === void 0;
     },
@@ -797,6 +907,8 @@ const Str = {
      * @return {String} masked string
      */
     maskFirstNCharacters(str, n, mask) {
+        'worklet';
+        
         // if str is empty, str or mask aren't strings,
         // or n is not a number, do nothing
         if (!this.isString(str) || !this.isString(mask)
@@ -814,6 +926,8 @@ const Str = {
      * @returns {string}
      */
     trim(str) {
+        'worklet';
+        
         return $.trim(str);
     },
 
@@ -823,6 +937,8 @@ const Str = {
      * @returns {Number}
      */
     percentageStringToNumber(percentageString) {
+        'worklet';
+        
         return Number(this.cutAfter(percentageString, '%'));
     },
 
@@ -832,6 +948,8 @@ const Str = {
      * @returns {string}
      */
     removeSpaces(input) {
+        'worklet';
+        
         return String(input).replace(' ', '');
     },
 
@@ -848,6 +966,8 @@ const Str = {
      * @return {String}
      */
     pluralize(singular, plural, n) {
+        'worklet';
+        
         if (!n || n > 1) {
             return plural;
         }
@@ -862,6 +982,8 @@ const Str = {
      * @return {Boolean} Whether or not this string is an encrpypted number
      */
     isEncryptedCardNumber(number) {
+        'worklet';
+        
         // Older encrypted versioning.
         if (/^[\da-fA-F]+$/.test(number)) {
             return number.length % 32 === 0;
@@ -881,6 +1003,8 @@ const Str = {
      * @return {Boolean}
      */
     toBool(value) {
+        'worklet';
+        
         if (this.isString(value)) {
             return value.toLowerCase() === 'true';
         }
@@ -896,6 +1020,8 @@ const Str = {
      * @return {Boolean} true when first could be the masked version of second
      */
     maskedEquals(first, second, mask) {
+        'worklet';
+        
         const firsts = first.match(/.{1,1}/g);
         const seconds = second.match(/.{1,1}/g);
         const defaultMask = mask || 'X';
@@ -922,6 +1048,8 @@ const Str = {
      * @return {string}
      */
     boldify(text, regexp) {
+        'worklet';
+        
         return text.replace(regexp, '<strong>$1</strong>');
     },
 
@@ -932,6 +1060,8 @@ const Str = {
      * @return {bool}
      */
     isValidPhone(phone) {
+        'worklet';
+        
         return CONST.SMS.E164_REGEX.test(phone);
     },
 
@@ -942,6 +1072,8 @@ const Str = {
      * @returns {bool}
      */
     isValidMention(mention) {
+        'worklet';
+        
         // Mentions can start @ proceeded by a space, eg "ping @user@domain.tld"
         if (/[\s@]/g.test(mention.charAt(0))) {
             return true;
@@ -961,6 +1093,8 @@ const Str = {
      * @return {String}
      */
     removeSMSDomain(text) {
+        'worklet';
+        
         return text.replace(REMOVE_SMS_DOMAIN_PATTERN, '');
     },
 
@@ -971,6 +1105,8 @@ const Str = {
      * @return {String}
      */
     isSMSLogin(text) {
+        'worklet';
+        
         return this.isValidPhone(this.removeSMSDomain(text));
     },
 
@@ -986,6 +1122,8 @@ const Str = {
      * @returns {Array}
      */
     matchAll(str, regex) {
+        'worklet';
+        
         const matches = [];
         str.replace(regex, (...args) => {
             const match = Array.prototype.slice.call(args, 0, -2);
@@ -1003,6 +1141,8 @@ const Str = {
      * @returns {String}
      */
     guid(prefix = '') {
+        'worklet';
+        
         function s4() {
             return Math.floor((1 + Math.random()) * 0x10000)
                 .toString(16)
@@ -1018,6 +1158,8 @@ const Str = {
      * @returns {String} The formatted URL
      */
     normalizeUrl(url) {
+        'worklet';
+        
         return (typeof url === 'string' && url.startsWith('/')) ? url : `/${url}`;
     },
 
@@ -1028,6 +1170,8 @@ const Str = {
      * @returns {String} The formatted URL
      */
     sanitizeURL(url) {
+        'worklet';
+        
         const regex = new RegExp(`^${URL_REGEX}$`, 'i');
         const match = regex.exec(url);
         if (!match) {
@@ -1046,6 +1190,8 @@ const Str = {
      * @returns {String}
      */
     result(parameter, ...args) {
+        'worklet';
+        
         return _.isFunction(parameter)
             ? parameter(...args)
             : parameter;
@@ -1059,6 +1205,8 @@ const Str = {
      * @returns {String|undefined}
      */
     getExtension(url) {
+        'worklet';
+        
         return _.first(_.last(url.split('.')).split('?')).toLowerCase();
     },
 
@@ -1069,6 +1217,8 @@ const Str = {
      * @returns {Boolean} Whether file path is PDF or not
      */
     isPDF(url) {
+        'worklet';
+        
         return this.getExtension(url) === 'pdf';
     },
 
@@ -1084,6 +1234,8 @@ const Str = {
      * @returns {Boolean}
      */
     isImage(url) {
+        'worklet';
+        
         return _.contains(['jpeg', 'jpg', 'gif', 'png', 'bmp', 'webp'], this.getExtension(url));
     },
 
@@ -1100,6 +1252,8 @@ const Str = {
      * @returns {Boolean}
      */
     isVideo(url) {
+        'worklet';
+        
         return _.contains(['mov', 'mp4', 'webm', 'mkv'], this.getExtension(url));
     },
 
@@ -1111,6 +1265,8 @@ const Str = {
      * @return {Boolean} True if is a domain account email, otherwise false.
      */
     isDomainEmail(email) {
+        'worklet';
+        
         return this.startsWith(email, '+@');
     },
 
@@ -1123,6 +1279,8 @@ const Str = {
      * @returns {String}
      */
     replaceAll(text, searchValue, replaceValue) {
+        'worklet';
+        
         return String.prototype.replaceAll.call(text, searchValue, replaceValue);
     },
 };
